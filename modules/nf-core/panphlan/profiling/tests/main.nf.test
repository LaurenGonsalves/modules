nextflow_process {

    name "Test Process PANPHLAN_PROFILING"
    script "modules/local/panphlan/profiling.nf"
    process "PANPHLAN_PROFILING"

    test("Should run without failures") {

            setup {
                run("PANPHLAN_MAP") {
                    script "modules/local/panphlan/map.nf"
                    process {
                        """
                        input[0] = "Bacteroides_fragilis"
                        input[1] = "/workspace/biobakerymgx/modules/local/panphlan/test_data/Bacteroides_fragilis/Bacteroides_fragilis_pangenome.tsv" // replace w: PANPHLAN_DOWNLOADPANGENOME.out.pangenome
                        input[2] = Channel.of (
                            [
                                file("/workspace/biobakerymgx/modules/local/panphlan/test_data/Bacteroides_fragilis/") //replace w: PANPHLAN_DOWNLOADPANGENOME.out.indexes
                            ]
                        )
                        input[3] = Channel.of (
                            [
                                [id:"test1_1", single_end:true ],
                                file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz")
                            ]
                        )
                        """
                    }
                }
            }

        when
            process {
                """
                input[0] = PANPHLAN_MAP.out.mapping_file
                input[1] = "Bacteroides_fragilis"
                input[2] = "/workspace/biobakerymgx/modules/local/panphlan/test_data/Bacteroides_fragilis/Bacteroides_fragilis_pangenome.tsv" // replace w: PANPHLAN_DOWNLOADPANGENOME.out.pangenome
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }
}