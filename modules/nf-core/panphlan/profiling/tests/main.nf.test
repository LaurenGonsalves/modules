nextflow_process {

    name "Test Process PANPHLAN_PROFILING"
    script "modules/nf-core/panphlan/profiling/main.nf"
    process "PANPHLAN_PROFILING"

            setup {
                run("PANPHLAN_DOWNLOADPANGENOME") {
                    script "modules/nf-core/panphlan/downloadpangenome/main.nf"
                    process {
                        """
                        input[0] = "Bacteroides_fragilis"
                        """
                    }
                }

                run("PANPHLAN_MAP") {
                    script "modules/nf-core/panphlan/map/main.nf"
                    process {
                        """
                        input[0] = PANPHLAN_DOWNLOADPANGENOME.out.pangenome
                        input[1] = PANPHLAN_DOWNLOADPANGENOME.out.indexes

                        input[2] = Channel.of (
                            [
                            [id:"test1", single_end:false ],
                                    file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz"),
                                    file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz")
                            ]
                        )
                        input[3] = "Bacteroides_fragilis"
                        """
                    }
                }
            }
    test("Should run without failures") {
        when {
            process {
                """
                input[0] = PANPHLAN_MAP.out.mapping_dir
                input[1] = PANPHLAN_DOWNLOADPANGENOME.out.pangenome
                input[2] = "Bacteroides_fragilis"

                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}